$(document).ready(function(){$(".progres").circularProgress({color:"#f0650d",line_width:18,height:"350px",width:"350px",percent:0,starting_position:35}).circularProgress("animate",100,1800)}),$(window).on("load",function(){$("#preloader").delay(1800).fadeOut("slow")}),function(t){var e={},i={init:function(i){var n=t.extend({color:"#000000",height:"300px",width:"300px",line_width:8,starting_position:25,percent:100,counter_clockwise:!1,percentage:!0,text:""},i);e=n;var s=t("<div class='progress-percentage'></div>");e.percentage||s.text(e.percentage),t(this).append(s);var a=t("<div class='progress-text'></div>");return"percent"!=e.text&&a.text(e.text),t(this).append(a),100!=e.starting_position&&(e.starting_position=e.starting_position%100),100!=e.ending_position&&(e.ending_position=e.ending_position%100),r(e.width),r(e.height),t(this).css({height:e.height,width:e.width}),t(this).addClass("circular-progress-bar"),t(this).find("canvas").remove(),t(this).append(o(t(this))),this},percent:function(i){return e.percent=i,t(this).css({height:e.height,width:e.width}),t(this).children("canvas").remove(),t(this).append(o(t(this))),this},animate:function(i,n){t(this).css({height:e.height,width:e.width});var r=n/10,s=(i-e.percent)/r,a=t(this),h=setInterval(function(){e.percent<i?(a.children("canvas").remove(),e.percent+=s,a.append(o(a))):clearInterval(h)},10);return this}};t.fn.circularProgress=function(e){return i[e]?i[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void t.error("Method "+e+" does not exist."):i.init.apply(this,arguments)};function n(t){return t.indexOf("px")?t.substring(0,t.length-2):canvas_height.indexOf("%")?t.substring(0,t.length-1):void 0}function r(t){if(t.toString().indexOf("px")<-1&&t.toString().indexOf("%")<-1)return t+"px"}function s(t,e){return e<0?parseInt(t)/100*360*(Math.PI/180)-Math.PI/2:(parseInt(t)+parseInt(e))/100*360*(Math.PI/180)-Math.PI/2}function o(i){var r=n(e.height.toString()),o=n(e.width.toString()),a=document.createElement("canvas");a.height=r,a.width=o;var h=a.getContext("2d");h.strokeStyle=e.color,h.lineWidth=e.line_width,h.beginPath();var c=s(e.starting_position,-1),p=s(e.starting_position,e.percent),d=0,g=o/2,l=r/2;return d=r>=o?.9*o/2-2*e.line_width:.9*r/2-2*e.line_width,h.arc(g,l,d,c,p,e.counter_clockwise),h.stroke(),e.percentage&&t(".progress-percentage").text(Math.round(e.percent)+"%"),a}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
